// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// compute_density
Rcpp::NumericVector compute_density(Rcpp::List distances, double radius);
RcppExport SEXP _cydar_compute_density(SEXP distancesSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_density(distances, radius));
    return rcpp_result_gen;
END_RCPP
}
// count_cells
Rcpp::IntegerMatrix count_cells(Rcpp::List assignments, Rcpp::NumericVector sample_id, int nsamples);
RcppExport SEXP _cydar_count_cells(SEXP assignmentsSEXP, SEXP sample_idSEXP, SEXP nsamplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type assignments(assignmentsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sample_id(sample_idSEXP);
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    rcpp_result_gen = Rcpp::wrap(count_cells(assignments, sample_id, nsamples));
    return rcpp_result_gen;
END_RCPP
}
// drop_redundant
Rcpp::LogicalVector drop_redundant(Rcpp::NumericMatrix intensities, Rcpp::IntegerVector ordering, Rcpp::List assignments, double threshold);
RcppExport SEXP _cydar_drop_redundant(SEXP intensitiesSEXP, SEXP orderingSEXP, SEXP assignmentsSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type intensities(intensitiesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ordering(orderingSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type assignments(assignmentsSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(drop_redundant(intensities, ordering, assignments, threshold));
    return rcpp_result_gen;
END_RCPP
}
// weighted_median_int
SEXP weighted_median_int(Rcpp::NumericMatrix exprs, Rcpp::List assignments, Rcpp::NumericVector sample_id, Rcpp::NumericVector sample_weight);
RcppExport SEXP _cydar_weighted_median_int(SEXP exprsSEXP, SEXP assignmentsSEXP, SEXP sample_idSEXP, SEXP sample_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type exprs(exprsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type assignments(assignmentsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sample_id(sample_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sample_weight(sample_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_median_int(exprs, assignments, sample_id, sample_weight));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cydar_compute_density", (DL_FUNC) &_cydar_compute_density, 2},
    {"_cydar_count_cells", (DL_FUNC) &_cydar_count_cells, 3},
    {"_cydar_drop_redundant", (DL_FUNC) &_cydar_drop_redundant, 4},
    {"_cydar_weighted_median_int", (DL_FUNC) &_cydar_weighted_median_int, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_cydar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
